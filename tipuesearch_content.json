{"pages":[{"text":"CV/Resume source code John Pfeiffer began with DOS on a 486, tweaking DOS to make games work and BBS's... Then there was Internet -> University -> Linux -> Football (aka soccer) Interesting places and cultures I've enjoyed: California -> Tennessee -> France -> Los Angeles -> Bulgaria -> England -> SF Bay Area Interesting things I've learned: Football (soccer) -> Piano -> Karate -> Guitar -> French -> Bulgarian Still working on: Be Good, Change the World","tags":"pages","loc":"/about-john-pfeiffer","title":"About John Pfeiffer"},{"text":"Docker is a union file system based layer system leveraging linux lxc containers for ultra lightweight virtualization/compartmentalization Images are the initial templates, each image has a unique ID Containers are the running virtual machines, each container has a unique ID Install Docker Docker on Ubuntu 14.04 sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9 sudo sh -c \"echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\" sudo apt-get update sudo apt-get install lxc-docker Start a docker image sudo docker pull ubuntu:14.04 From now on it is assumed you use sudo before any docker command! docker run --help docker run --rm -i -t ubuntu:14.04 /bin/bash create a container -- rm : automatically remove the container when it exits - i : keep stdin open even if not attached - t : allocate a tty , attach stdin and stdout use the ubuntu 14.04 minimal image Runs an interactive bash shell This will continue to exist in a stopped state once exited (see \"docker ps -a\") root @ f5878ed6016e :/ # cat / etc / issue root @ f5878ed6016e :/ # uname - a root @ f5878ed6016e :/ # df - h Control-p then Control-q to detach the tty without exiting the shell docker ps docker run ubuntu:14.04 uname -a docker attach f5878ed6016e Control + C (now we have exited the container and it will clean itself up) docker ps -a spun up another container but only long enough to run the command CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES e4b436320442 ubuntu : 14.04 - uname - a 3 minutes ago elegant_engelbart docker rm e4b436320442 Alternatively: docker rm elegant_engelbart Git on docker ubuntu:14.04 docker run -i -t ubuntu:14.04 /bin/bash Control + p then Control + q (to detach the tty without exiting the shell) docker ps -a (make a note of the ID or NAME) docker attach ID_OR_NAME apt-get update; apt-get install git -y cd /root git --version git clone https://johnpfeiffer@bitbucket.org/johnpfeiffer/myrepo.git exit exit now the Container will have git installed, a repo cloned, and will be stopped docker commit container_name_here johnpfeiffer_git_repo 4a74440186d976caeccc52f5ed2bd44269beb84d472391a7ce26ee3db8ffc1e9 docker images output REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE johnpfeiffer_git_repo latest 4a74440186d9 54 seconds ago 402 MB ubuntu 14.04 e54ca5efa2e9 3 weeks ago 276.5 MB Add a port to an image docker run -i -t -p 127.0.0.1:8000:8000 --name john johnpfeiffer_git_repo:latest /bin/bash control+p then control+q docker attach john cd /root/myrepo pelican content (assuming pelicanconf.py is here) cd output python -m SimpleHTTPServer control+p then control+q docker ps -a http://127.0.0.1:8000 Python and Pelican static site generator on docker ubuntu:14.04 apt-get update; apt-get install python python-setuptools openssl wget -y wget -qO- https://raw.github.com/pypa/pip/master/contrib/get-pip.py | sudo python pip install pelican Markdown beautifulsoup4 DockerFile to automate building a container vi mydockerfile FROM ubuntu : 14.04 MAINTAINER John Pfeiffer RUN apt - get update - y RUN apt - get upgrade - y RUN apt - get install - y openssh - server RUN mkdir / var / run / sshd CMD / usr / sbin / sshd - D > Each RUN command creates an intermediate container , so make sure you use the - rm option docker build -t=newimagetag -rm=true . docker run -v $HOSTDIR:$DOCKERDIR Useful Commands sudo docker info docker images docker images --help docker ps -a Download all ubuntu docker images sudo docker pull ubuntu Pulling repository ubuntu 58faa899733f: Download complete 195eb90b5349: Download complete hundreds of megabytes downloaded docker images Remove an image docker rmi 3db9c44f4520 docker search stackbrew/ubuntu FYI stackbrew/ubuntu is the same as ubuntu , stackbrew is the curated Docker registry docker start -i -a IDORNAME docker images --tree docker commit --help docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py docker port IDORNAME Advanced Docker pre built images docker run --rm -t -i phusion/baseimage /sbin/my_init -- bash -l docker run --rm -t -i phusion/passenger-full bash -l root@f4b25455699c:/# Docker for Web app development REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE phusion/passenger-full latest 5327fda0d529 2 weeks ago 732 MB https://www.phusionpassenger.com/documentation_and_support More Info https://gist.github.com/wsargent/7049221 https://docs.docker.com/reference/commandline/cli/#run","tags":"virtualization","loc":"/docker-intro-install-run-and-port-forward","title":"Docker Intro install run and port forward"},{"text":"html <em> is markdown *emphasis* or _italics_ = emphasis or italics html <strong> is markdown **strong* or __bold__ = strong or bold html strikethrough is not supported but can just be <del>strikethrough</del> = strikethrough html <blockquote> is markdown > at the start of each line unordered list - item or alternatives: + item , * item html <hr /> is markdown - - - or alternatives: * * * , *** , ***** html <a href= for hyper links is: [an example](http://example.com/ \"ExampleTitle\") an example both absolute and relative links are supported, as well as reference links that are defined elsewhere: This is [an example][someid] [someid]: http://example.com/ \"Optional Title Here\" numbered list 1 at the beginning of each line any digit will do, the numbering is rendered in order ensure the numbered list is surrounded by empty lines Inline code is markdown `backtick around the text` = backtick around the text A code block is markdown indent 4 spaces or 1 tab a blank line in the code block still needs to be indented ensure the code block is surrounded by empty lines H1 # H1 H6 ###### H6 more info","tags":"programming","loc":"/markdown-syntax-cheatsheet","title":"Markdown syntax cheatsheet"},{"text":"While you can use a CNAME for HTTP, (usually a subdomain like blog.example.com), it will not work with HTTPS (no option to upload your own cert). create a bitbucket account with username create a repo named username.bitbucket.org mkdir username.bitbucket.org cd username.bitbucket.org echo \"hi\" > index.html git init . git add git commit -m \"first site index\" git remote add origin git@bitbucket.org:username/username.bitbucket.org.git git push origin master git branch --set-upstream master origin/master git pull https://username.bitbucket.org","tags":"programming","loc":"/creating-a-static-web-site-with-bitbucket","title":"Creating a static web site with Bitbucket"},{"text":"Pelican is an open source project that converts static text files into an html site. Install Pelican sudo pip install pelican Markdown installing both the pelican and the Markdown packages optionally use virtualenv venv; source venv/bin/activate pelican-quickstart Welcome to pelican-quickstart v3.3.0. This script will help you create a new Pelican-based website. Please answer the following questions so this script can generate the files needed by Pelican. > Where do you want to create your new web site? [.] > What will be the title of this web site? johnpfeiffer.bitbucket.org > Who will be the author of this web site? john pfeiffer > What will be the default language of this web site? [en] > Do you want to specify a URL prefix? e.g., http://example.com (Y/n) > What is your URL prefix? (see above example; no trailing slash) https://johnpfeiffer.bitbucket.org > Do you want to enable article pagination? (Y/n) > Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) > Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) > Do you want to upload your website using FTP? (y/N) > Do you want to upload your website using SSH? (y/N) > Do you want to upload your website using Dropbox? (y/N) > Do you want to upload your website using S3? (y/N) > Do you want to upload your website using Rackspace Cloud Files? (y/N) Done. Your new project is available at /home/ubuntu/BLOG tree . \u251c\u2500\u2500 content \u251c\u2500\u2500 develop_server.sh \u251c\u2500\u2500 fabfile.py \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 output \u251c\u2500\u2500 pelicanconf.py \u2514\u2500\u2500 publishconf.py 2 directories, 5 files Create Content vi content/hello_world.md Title: My first blog post Date: 2014-06-21 20:20 Tags: python Slug: my-first-blog-post Author: John Pfeiffer Summary: Short version for index and feeds This is the content of my first blog post. Run a dev server to see the results locally make devserver ...Starting up Pelican and pelican.server... ./develop_server.sh stop stop the dev server (required if reloading the .conf file) This only works with the basic first setup, after that it is better to manually use multiple screens: make clean make regenerate auto detects any content changes and reloads itself cd output; python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... (Control + C to quit) http://localhost:8000 mkdir -p content/pages Publish I just use the pelicanconf output rather than publishconf, and I use git with a bitbucket static html site. Example pelican configuration file Contains the elegant theme and tipue search plugin vi pelicanconf.py #!/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals AUTHOR = u'john pfeiffer' SITENAME = u'johnpfeiffer' SITEURL = '' OUTPUT_PATH = 'output/' DEFAULT_DATE_FORMAT = '%Y-%m-%d' # Feed generation is usually not desired when developing FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None # clean urls for pages PAGE_URL = '{slug}' PAGE_SAVE_AS = '{slug}/index.html' # clean urls for articles ARTICLE_SAVE_AS = '{slug}/index.html' ARTICLE_URL = '{slug}' DEFAULT_PAGINATION = 10 THEME = 'themes/pelican-elegant' PLUGIN_PATHS = ['plugins'] PLUGINS = ['sitemap', 'extract_toc', 'tipue_search'] MD_EXTENSIONS = ['codehilite(css_class=highlight)', 'extra', 'headerid', 'toc'] DIRECT_TEMPLATES = (('index', 'tags', 'categories','archives', 'search', '404')) STATIC_PATHS = ['theme/images', 'images'] SITEMAP = { 'format': 'xml', 'priorities': { 'articles': 0.5, 'indexes': 0.5, 'pages': 0.5 }, 'changefreqs': { 'articles': 'monthly', 'indexes': 'daily', 'pages': 'monthly' } } Importing from drupal Hack the Drupal files to allow a lot more than 10 items per feed grep -r 'items per feed' . learned from drupal-7.28/modules/system/system.module vi modules/system/system.admin.inc $form['feed_default_items'] Add to the dropdown choices of 10, 15, 30 etc. the option of 999 sudo apt-get install pandoc sudo pip install feedparser pelican-import -h pelican-import --feed http://blog.example.com/rss.xml -o output/ -m markdown Pelican Themes https://github.com/getpelican/pelican-themes git clone --recursive https://github.com/getpelican/pelican-themes ~/pelican-themes http://pelican.readthedocs.org/en/latest/pelican-themes.html mkdir themes `cp -a pelican-themes/elegant themes/ Pelican Plugins https://github.com/getpelican/pelican-plugins git clone https://github.com/getpelican/pelican-plugins mkdir plugins cp -a pelican-plugins/sitemap plugins/ more info http://pelican.readthedocs.org/en/latest/settings.html Tweaking default syntax highlighting: http://pygments.org/docs/lexers/","tags":"programming","loc":"/how-to-set-up-a-pelican-static-blog-site","title":"How to set up a Pelican static blog site"},{"text":"Security is risk management The hundreds of articles about \"changing passwords doesn't improve security\" are just hype/noise without context. While \"changing the highly complex password every 90 days\" is considered inefficient and draconian... But what about at least changing the password once a year? While it's likely that an external attacker or disgruntled employee will use a compromised password immediately, it doesn't mean there isn't a good reason to choose a frequency of password change: If a sticky note attached to a laptop sold at a garage sale is still valid for the company's online bank account then you're in trouble. Reduce the risk, have a policy to manage that window of access to something you're comfortable with. Dependency Visibility and the opportunity to improve your infrastructure is well worth the cost of finding every hard coded place that a password is embedded in your organization The password was just changed You quickly find something is not working You either change the password back or refactor/reorganized and break the dependency Far better than: - a random event like a forgotten password reset by one individual in the organization - creates a mystery problem in mission critical systems for everyone else to track down","tags":"it","loc":"/content/yes-change-your-password-regularly","title":"Yes, Change your Password regularly"}]}